[
  
  {
    "title": "PrimusC2 - New Release | Update 5.0",
    "url": "/posts/PrimusC2_update_5.0/",
    "categories": "PrimusC2, updates",
    "tags": "AD, Red Team, C2, PrimusC2, ExecuteAssembly, Caddy, Redirector, HTTPS, Steal token",
    "date": "2024-09-16 00:00:00 +0200",
    





    
    "snippet": "Time for another update for PrimusC2. It includes significant changes to the project in order to create a more stable baseline for upcoming updates.PrimusC2 Github linkWhat‚Äôs new:  Migrated to usin...",
    "content": "Time for another update for PrimusC2. It includes significant changes to the project in order to create a more stable baseline for upcoming updates.PrimusC2 Github linkWhat‚Äôs new:  Migrated to using a DB üòé          Persistent sessions      All logic use the DB for data retrieval and storage      Almost got rid of the use of global vars and non-persistent data types        TCP implant disabled          Needs a complete rework        EXE, Shellcode and DLL compilation          Choose what format you want the payload in        Added Docker compatibility for easier use          No need for any dependency hell        Web GUI updated          Add notes to callbacks      Fetch data from the DB      Output Searcher      Added more compile options      Shows callback data        Implant updates          Returns more detailed windows version      Steal_token      rev2self      whoami      tShell      Usercontext        CLI visual updates with ‚Äúarrow menus‚Äù          Better visibility      Shows current user context when interacting with a callback        More documentation here  Optimization of backend stuff  Bug fixes          Sleep      pwsh_cradle      Im going to elaborate on some of the changes in the coming sections.¬†DB migrationIn order to create a more stable baseline and make it significantly easier to work with data in the backend and frontend, it was necessary to move away from using different data types, such as lists, dicts, tuples etc. and migrate everything over to using a DB instead. I went with SQLite, as this was my first time working with a DB and it turned out to be quite easy and straight forward to work with. With a DB implemented it was also possible to create persistent sessions. This means that listeners can be restarted and old authorization keys can be reused, so any existing implants can talk with the server. With this change you do not have to start over if a fatal exception occurs, instead just restart the server you are back in action.With the DB implemented, it also enables me to start the improvement of the stability of the framework and handle more exceptions (which is still on my todo).TCP implant disabledI have decided to disable the TCP implant in this update (the code is still, it is just disabled). My reasoning behind this change is that the TCP version of the implant is quite outdated and clumsy compared to the rest of the implants. I would like to perform a complete rework of it before re-enabling it again.EXE, Shellcode and DLL compilationTo expand upon the flexibility of PrimusC2, i have added the option for multiple payload formats that can be generated upon request. This will give the operator the ability to freely choose how to deploy the implant. The DLL is created with the exported function: Ost. The shellcode is created using the sRDI project, that converts a DLL to PIC shellcode.Docker compatibilityI decided to port the whole project over to a docker setup as well. This is done to make the C2 more usable and portable. You do not have to fight dependencies and weird errors when using this setup. It should work out of the box (famous last words‚Ä¶)If you find the docker setup to be broken in any way, please let me know.Web GUI updatedThe web GUI has gotten some additional new features and fixes. The biggest thing is of course that the data is now persistent and stored in the database. But i added some small quality of life stuff, that i want to include here as well. First up is the ability to add notes to each callback, in order to help track callbacks and their data.Additionally, a new feature has been implemented, which i call the ‚ÄúOutput Searcher‚Äù. It can be used to search trough all the callbacks for a specific command or output that is buried in one of the callbacks. This feature is especially useful when many callbacks have been received and the operator can‚Äôt remember in which callback that some specific data is located.Lastly i also added the callback data in the left corner of the callback screen (see the GIF above), to avoid unessecarry clicking in and out of the interact screen. To accommodate the new compile options, the option to choose between the different ones were added as well.Implant updatesThis update also contains some new additions to the implants. One of the cooler features added is the steal_token &amp; rev2self commands. This will allow the operator to steal and impersonate access tokens from an arbitrary processes (as long as the implant is High integrity). As of now, the implant is not entirely ‚Äúimpersonation aware‚Äù (i need to do some research in modifying the existing functionality to be completely impersonation aware). However, in order for the steal_token functionality not to be useless, i added a new command called tShell. It will use the stolen token to execute commands via cmd.exe (i know it‚Äôs not perfect, but it‚Äôs a start). Both the GUI and CLI have been updated to reflect what the current user context is. Lastly, a simple whoami command was added as well.ConclusionThis update is not as ‚Äúsexy‚Äù as some of the previous ones, but it has achieved a massive milestone in terms of migrating all data handling to using a DB instead of non-persistent data types. This has laid out the building blocks and helped strengthen the foundation of the project in order to make it durable and easy to work with. Additionally, i did add some other small(but cool) things that mature the project just a tiny bit more. I have plenty of stuff on my internal to-do for the project, so stay tuned for that!This is it for now. I hope that you will enjoy the update, and I would love to hear your feedback or answer any questions that you might have.Thanks for reading, and have an excellent day.Roadmap  Execute-Assembly  Encryption of data streams  Implementation of smart pipe redirectors with automation  Download functionality for the implant  Upload functionality for the implant  Directory operations  HTTP C2 channel  Improve OPSEC  Rework backend to accommodate a database for persistent storage  Evasion techniques  Custom Term Rewriting Macro  Refactor entire code base into multiple files and maybe classes¬†¬†"
  },
  
  {
    "title": "CRTO Review",
    "url": "/posts/CRTO/",
    "categories": "Certifications, reviews",
    "tags": "AD, Red Team, Certificate",
    "date": "2024-05-25 00:00:00 +0200",
    





    
    "snippet": "I‚Äôm very pleased to announce that I passed the Certified Red Team Operator(CRTO), from Zero-Point Security. It was quite an enjoyable experience, appreciating not only the opportunity to reinforce ...",
    "content": "I‚Äôm very pleased to announce that I passed the Certified Red Team Operator(CRTO), from Zero-Point Security. It was quite an enjoyable experience, appreciating not only the opportunity to reinforce my existing knowledge but also the newly gained skills.Throughout this post, I will go through my thoughts about the learning material, the exam experience, and the final conclusion about the certificate itself.The Training Material and LabThe format of the learning material is straight forward. You will get access to a learning portal on the website that contains a mix of text based learning and a few videos in more advanced parts of the course. Everything needed in order to pass the exam is within the course (looking at you(again), Offsec üëÄ..)If you read thoroughly trough the training material and complete the lab fully, you should be good to go‚Ä¶.However, there are some prerequisites, imo, in order for this to apply to you:¬†      TAKE notes, and do it thoroughly; this means writing down commands, tool syntaxes, short descriptions of topics, and so on. Finally, this is the deciding factor in whether you will succeed or fail.        Think basic, and rely on your GOOD notes.¬†        Be comfortable with enumeration in Active Directory using manual tools like PowerView or ADSearch, bloodhound and other graph tools are not available or allowed in the exam or lab .  FormatRegarding the format of the learning material, as mentioned above, the learning material is based on mostly text and a few videos in the more advanced parts of the course. The content is accessed trough a learning portal on the website itself. It includes a nice progress tracker and gives you a good overview of how far you are in the course and what sections you are currently working on. This model really supports the student and shifts focus to just absorbing the knowledge presented in the course.ContentI really liked the content and the knowledge presented in the course. It covers everything from simple enumeration in Active Directory to persistence, etc. Rasta does a good job of presenting the content, and it‚Äôs up-to-date. The course is built around the use of Cobalt Strike, and it takes you from setting up the teamserver to messing with the artifact kit to create less detectable payloads. Besides that, the course does a good job of teaching all the basics of Active directory enumeration and exploitation. Lastly for the ‚ÄúRed Team part‚Äù,  there is a section on initial access that introduces you to the basics of initial access and relevant techniques and External Reconnaissance. Overall, the course is filled with awesome content, that covers many aspects of traditional pentesting and Red Teaming.However, one thing that got my attention throughout the course, was that some parts had really short explanations. It felt like we had to guess what commands that was used in order to complete an attack or which user we were running the attack as. The lab exploitation is not in chronological order, so it kept jumping between different machines and users, which can be confusing for the student.Lab timeThe lab is all-round very well built; it‚Äôs reasonable stable, a BUNCH of attack primitives are covered. The lab is based on a Snaplabs environment and can be accessed within the bought time. The machines are accessed trough a guacamole interface trough the browser and it works fairly decent, even though i prefer a VPN connection(but i do understand why this is not case, due to the use of Cobalt Strike). I really recommend to complete alle the challenges mentioned throughout, they give a deeper understanding of the attacks and how they can be achieved(really recommend to do the challenge under One-Way Outbound trust).The examThe exam itself was in a very stable environment, and it was easy to access (same access method as the lab). The one thing that the CRTO does, that really sets it apart from other related certs, is how it approaches the exam (and I can‚Äôt stress this enough, this is setting the bar for how exams should be within the industry). You are given 48 hours of exam runtime within the lab; this is the time where you exploit the environment. However, you just need to complete the exam within a 4-day window. This means that you can pause your lab at any given time to sleep, relax, exercise, etc. This is huge in terms of the student‚Äôs mental and physical ability to pass the certification, and people with families can have an easier time taking the exam because it does not pause their entire life when starting the exam. It‚Äôs great to see the industry moving away from Offsec‚Äôs ‚Äúsweatshop‚Äù exam mentality where you have to pause your life for 24 stressful hours in order to attend the exam.My experience with the exam didn‚Äôt start out great. I had major technical issues with my payloads and had to do a lot of custom fixes, but I eventually figured it out. Once the technical problems were fixed, things went more smoothly. I managed to get the first 3 out of 8 flags on the first day, and after a good night‚Äôs sleep, I compromised the remaining parts of the environment and collected all 8 flags(You need 6 flags to pass). The exam is pretty straightforward and doesn‚Äôt have any CTF-style rabbit holes. Just stick to what the course taught you, rely on your notes and the course material, and you will be fine.ConclusionThe Certified Red Team Operator (CRTO) Zero-Point Security offers a comprehensive and enjoyable learning experience. The course material is well-structured, combining text and videos, and covers everything from Active Directory enumeration to persistence and initial access. While some explanations could be more detailed, thorough note-taking and focusing on the basics will help you pass the exam in the end.The lab environment is robust and stable, providing a wide range of attack scenarios. The exam format, with 48 hours of runtime within a 4-day window, significantly reduces stress and accommodates personal schedules, making it accessible for those with other commitments.Overall, the CRTO sets a standard for certification exams by prioritizing student well-being and effective learning. Whether you‚Äôre a beginner, a blue teamer, or an experienced pentester, this certification is a worth your time.Good luck and have fun!                    Red Team Operator          Awarded: May 26, 2024              Awarded To:        Oliver Albertsen              VERIFY          ¬†¬†"
  },
  
  {
    "title": "PrimusRedir - Fowarding the world to your C2",
    "url": "/posts/Primus_Redir/",
    "categories": "Redteam",
    "tags": "Red Team, C2, Caddy, Redirector, HTTPS",
    "date": "2024-04-14 00:00:00 +0200",
    





    
    "snippet": "  The tool itself has not been released yet, but its coming very soon!.Time for a new bit of content. While working on the latest update for PrimusC2 i spent quite a while creating an automated red...",
    "content": "  The tool itself has not been released yet, but its coming very soon!.Time for a new bit of content. While working on the latest update for PrimusC2 i spent quite a while creating an automated redirector infrastructure utilizing a Digital Ocean VPS, Cloudflare, Wireguard and Caddy. This was implemented directly into PrimusC2, but i also turned this into a standalone tool that you can use with any C2: PrimusRedirRedirectors in Red TeamingRedirectors are one of the most important aspects within C2 infrastructure. Redirectors provide the initial and required obscurity of the C2 team server. A redirector functions as a proxy for the team server, the goal is to have one placed in front of every asset in the backend to introduce obscurity and resilience. A basic redirector works in the following way. Implants will call back to the redirectors domain/address, and all the relevant traffic arriving will be redirected to the team server. In Figure one below a setup in its simplest form with one redirector in front of the team server is displayed.Figure 1: A basic C2 setup with one redirectorMultiple types of C2 redirectors exist and they have different strengths and weaknesses. The first redirector type is dump pipe redirection, this means that the redirector will forward any traffic that is directed at a specific listener port, to the team server behind the redirector.  There is no inspection of the traffic, determining if this is a valid callback from the implant or if it‚Äôs the blue team probing the redirector to find the obscured C2 server.  A setup like the one mentioned above can be achieved using tools like Socat and IPtables which have the capability to forward traffic from one port to another.This setup is the simplest and easiest for a redirector and will provide simple obscurity for the C2 server. A visual representation can be seen in Figure two below.Figure 2: Dumb Pipe Redirection with SocatThe next type is smart pipe redirection, this type will not blindly forward traffic to the C2 server. The traffic will be inspected upon arrival to the redirector, from this point it will determine if the C2 traffic is valid, and then forward the traffic to the C2 server,  if the traffic is invalid, the redirector will either show a fake webpage or it will redirect the traffic to another legitimate site on the internet. This gives a better level of obscurity and enhances the operational security of the infrastructure. When the blue team is fingerprinting and identifying If the current traffic pattern, is leading to an active C2 infrastructure. The mentioned setup, if configured correctly, will hinder the blue team in identifying and exposing the infrastructure and C2 server.  In figure three a visual representation can be observed.Figure 3: Smart Pipe Redirection with CaddyDepending on which type of C2 channel that is used in the infrastructure, the method of validation can differ from type to type. One of the most popular methods when using the HTTP channel to validate is by using the user agent header in the HTTP request. If the correct header isn‚Äôt received, the request will be redirected to the fake site. Another example of validation can be the use of JSON Web Token(JWT). The redirector would only accept requests that have a valid and signed JWT in the authorization header, if the token is not valid it would redirect or return a 404-error page. This would require the server to generate a symmetric key that can be used for encryption and decryption of the JWT. The mentioned validation methods are by no means an exhaustive list of methods but are just relevant examples.There are multiple options when choosing what kind of system, the redirector should be provisioned on. The first option is a small server or VPS in the cloud. These instances can be provisioned and torn down quickly, this means they are easily automated which is essential for a resilient and efficient C2 infrastructure. When utilizing these VPS/servers several different solutions for handling the redirection exist, some of the popular options for smart pipe redirection are, Apache, Nginx, and lastly Caddy. All options function as reverse proxies and can be configured to use different validation methods.The second option is using a serverless approach and using functions from cloud providers such as AWS, Microsoft Azure, and Cloudflare workers. Essentially, it‚Äôs just ‚Äúserver-less computing‚Äù, this means that you can provide some code to the platform of choice, and it will be executed upon a trigger, that is validated, this could be an SMS, HTTP post request, or anything else that is defined. The cloud provider will then take care of all the computing and resources needed for the code to run. This takes the configuration of servers away from the operators giving them more time to focus on the more important aspects of the infrastructure.  In Figure four a visual representation of an AWS lambda redirector can be seen.Figure 4: AWS Lambda RedirectorAll the above are viable solutions in terms of what system and validation type that is chosen. It all depends on what type of engagement that‚Äôs presented and how the clients environment is configured. However, it‚Äôs recommended to employ the smart redirector in most cases, because it will offer improved operational security and give the operator more flexibility in terms of customizing how the redirector behaves.With the basics covered i will now introduce my take on a simple, flexible and easy to configure redirector setup using a VPS in the cloud. PrimusRedir is a Python script that handles the provisioning, configuration and teardown of a simple redirector in the cloud. In the coming sections i will go into more detail about the components of PrimusRedir.OverviewPrimusRedir consists of the following components:  Cloudflare for DNS.  Caddy as the reverse proxy and traffic filtering.  Wireguard connection between the VPS and the C2 server.  Digital Ocean VPS  Terraform as IaCCloudflareI selected Cloudflare as the DNS provider due to its advantage of rapid DNS propagation when initializing the redirector. Cloudflare allows you to add your domain as a site prior to the start of the engagement. This provides the operator with the opportunity to alter the nameservers at the domain registrar, ensuring everything is set up and ready before the engagement begins. This process can be carried out continuously, providing the operator with a multitude of domains to use when setting up the redirectors.It‚Äôs pretty straight forward to add your domain as site on Cloudflare, just follow the guide  If the DNS settings is set to proxy when the DNS record is registered, please change to DNS only.The rest of the content still needs to be written and are currently not ready to be released, once ready it will be added here along with the toolCaddyWireguardDigital Ocean VPSTerraform¬†¬†"
  },
  
  {
    "title": "PrimusC2 - New Release | Update 4.0",
    "url": "/posts/PrimusC2_update_4.0/",
    "categories": "PrimusC2, updates",
    "tags": "AD, Red Team, C2, PrimusC2, ExecuteAssembly, Caddy, Redirector, HTTPS",
    "date": "2024-03-19 00:00:00 +0100",
    





    
    "snippet": "Time for another update for PrimusC2. This update do not have as much content as the previous updates, but it has some stuff that greatly improves the maturity of the project.PrimusC2 Github linkWh...",
    "content": "Time for another update for PrimusC2. This update do not have as much content as the previous updates, but it has some stuff that greatly improves the maturity of the project.PrimusC2 Github linkWhat‚Äôs new:  HTTPS based implant üòé¬†  Smart Pipe Redirector setup          Implant callback via domains      cloudflare DNS      Automatic SSL cert via Caddy      Caddy      Modularity        Updated help menu          Focus on improving the ‚Äòease of use‚Äô      Structure to the help menu      Examples included for most commands        Introduction of a Web Interface          Listener Generation      Callbacks/Interact      Generate implants      Payload list with upload functionality        Fixed callback time not updating with correct time  More documentation here  Optimization of backend stuff  Bug fixesIm going to elaborate on some of the changes in the coming sections.¬†HTTPS ImplantI reworked the structure of the HTTP implants to use a new and more flexible HTTP system. This also enabled me to create an implant that supports HTTPS which improves the OPSEC of project quite a bit. The HTTPS implant can only be used in tandem with the newly introduced Smart Pipe Redirector that supports using domains as the callback address. The Implant itself has the same capabilities as the HTTP implant introduced in update 3.0.Smart Pipe Redirector setupThe Smart Pipe Redirector is the ‚ÄúHeavy hitter‚Äù in this update. It provides the framework with an automated method of provisioning a redirector that uses HTTPS, and greatly reduces the workload for the operator once the initial setup has been completed. The redirector consists of the following parts:  Cloudflare for DNS.  Caddy as the reverse proxy and traffic filtering.  Wireguard connection between the VPS and the C2 server.  Digital Ocean VPS  Terraform as IaCThe redirector needs an initial setup, however after the setup, you will have a fully working redirector provisioned in about 3 minutes. When you exit out of PrimusC2 the redirector will automatically be torn down and all resources will be destroyed. See the docs for information about the setup process.Caddy is the reverse proxy used on this redirector, it takes care of creating an automatic SSL certificate, traffic filtering and redirection of traffic. Caddy is pretty awesome and i plan to make a separate blog post about the redirector setup in the near future.  At the moment Caddy has some basic block lists implemented for User-Agents and IP-Addresses. This is easily configured within the main Caddyfile which is the configuration file that Caddy uses.Below is just a quick snippet of an active HTTPS VPS redirector:And if you visit the site, a benign message is being shown(easily changed) and you can see that it has a valid SSL certificate. Updated help menuThe framework lacked a proper help menu(Thanks Lsecqtüòé) that helped new operators understand the functionality and the intended uses of different commands. So i went ahead and created a help menu for all the commands available at this time.An example of the new help menu in action:If you have feedback or suggestions, please reach out!WebinterfaceAnother big addition is the introduction of a web interface. The interface makes the framework more simple to use and provides a better overview. I am by no means skilled in website development, so it‚Äôs not the most stable, cool or best-practice interface. I tried to go for a simplistic look with a all the basic features available in this first iteration. In the future i would love to add more functionality and control to the web interface. The current iteration consists of the following parts:  Home  Listener  Callbacks  PayloadsA short walkthrough of the new interface can be seen below:CreditA colleague of mine srask3n is on his Python learning journey. I tasked him with writing me a simple Python script, that would auto-generate me some Star Wars related names. He created a cool function that i could use in the pwsh_cradle command üòéConclusionThis update introduces some pretty significant additions to the framework and certainly helps with improving the maturity of the project. With the new redirector setup and the HTTPS implant a whole new lane of opportunity has opened up and im excited to built upon it in the future. The introduction of the help menu and the web interface helps with improving the accessibility of the framework and hopefully makes it more pleasant to use. A lot of small changes have been made to the backend as well. However one of my next big goals is to rewrite the backend so it uses a proper database instead of everything living in confusing Lists, Dicts strings etc üò≠.This is it for now. I hope that you will enjoy the update, and I would love to hear your feedback or answer any questions that you might have.Thanks for reading, and have an excellent day.Roadmap  Execute-Assembly  Encryption of data streams  Implementation of smart pipe redirectors with automation  Download functionality for the implant  Upload functionality for the implant  Directory operations  HTTP C2 channel  Improve OPSEC  Rework backend to accomodate a database for persistant storage  Evasion techniques  Custom Term Rewriting Macro¬†¬†"
  },
  
  {
    "title": "PrimusC2 - New Release | Update 3.0",
    "url": "/posts/PrimusC2_update_3.0/",
    "categories": "PrimusC2, updates",
    "tags": "AD, Red Team, C2, PrimusC2, ExecuteAssembly",
    "date": "2023-12-24 00:00:00 +0100",
    





    
    "snippet": "I am very happy to have this new update of PrimusC2 released. I have completed a lot of the tasks on the roadmap and made more Qol stuff that makes the C2 more nice to use and work with!PrimusC2 Gi...",
    "content": "I am very happy to have this new update of PrimusC2 released. I have completed a lot of the tasks on the roadmap and made more Qol stuff that makes the C2 more nice to use and work with!PrimusC2 Github linkWhat‚Äôs new:  HTTP based implant üòé¬†          Execute .NET Assembly in memory      Registry persistance capability      Download of files from target      Callback interval(Sleep) adjustable      Server a static webpage if browsing to ‚Äò/‚Äô of the C2 server      STABILLITY        RC4 encryption of data streams on HTTP implant  Revamp of pwsh_cradle functionality  Quality of life stuff          Autocomplete commands improvements      Payload directory listing      Network interface autocomplete      Add payloads from Payload folder to autocomeplete automatically      Payload server now serving the files from the Payloads folder      Include AMSI status on callback      Updated command names        Updated requirements.txtIm going to elaborate on some of the changes in the coming sections.¬†HTTP ImplantFor a long time, it‚Äôs been on my to-do list to develop an HTTP-based implant. Now it‚Äôs finally become a reality, and it brings a lot of new cool features and improved stability for the implant compared to the TCP-based implant. I have focused on making the code more readable and modular, so it‚Äôs easier to implement features and get a sense of what‚Äôs going on in the code. In the coming section, I will show some of the new functionality.Here is a picture showing of of the new HTTP implant in action üòé¬†The generation of a listener is very simple and smooth with the new automatic and dynamic autocomplete system.RC4 EncryptionAs mentioned above, I have implemented RC4 encryption for all the data streams within the HTTP implant. RC4 is by no means a ‚Äúsecure‚Äù encryption algorithm at all, but it brings some much-needed OPSEC to PrimusC2. There is still a lot of work to be done regarding the OPSEC of the framework, but this is a great step in the right direction.Below is just a quick snippet of how the traffic looks within a packet capture:Stability of execute-ASMExecute-ASM works as intended within the TCP implant; however, it can be very unstable and cause a lot of bugs and trouble when executing. The implementation in the HTTP implant is way more stable, and I have not seen any bugs while testing it myself. This is huge, as the operartor does not need to fear for his life while running Rubeus ü§£Here SharpWMI is executed, firstly with the ‚Äú-h‚Äù command:Afterwards, the command to enumerate which antivirus is running is executed without any issues!DownloadAnother item from the roadmap that I have implemented is the download functionality. It brings the ability for the operator to exfiltrate data with PrimusC2, which is pretty cool!‚ÄúStuff‚Äù exfiltrated to the loot directory:¬†Quality of life and command handlingMy goal is to make the framework ‚Äúnice‚Äù to use, so I will keep on trying to implement small quality of life stuff whenever i can :) I‚Äôve made some improvements to the autocomplete system, and I have implemented several ways to make it more dynamic and make it easier for the operator to ‚Äúautocomplete‚Äù stuff.When generating a listener, PrimusC2 will now look through the available network interfaces on the system and then make them available for autocompletion. The same concept has been applied to the payloads present in the payloads folder. When the server is executed, it will look through the payloads folder and add payloads to the autocomplete list.Another cool feature added is the payloads command, which will do a directory listing of the payloads folder and add the contents to the autocomplete list if any new payloads have been added.ConclusionI hit some pretty big milestones with this update and got the HTTP implant working along with a bunch of cool features. A lot of much-needed stability is also introduced with this update (the HTTP implant). I focused on making the new implant more structured and easier to modify in order to make it easier to implement new features in the future. A lot of bugs still exist and a lot of features could use an overhaul, so i will continue to work on this when i have the time!This is it for now. I hope that you will enjoy the update, and I would love to hear your feedback or answer any questions that you might have.Thanks for reading, and have an excellent day.Roadmap  Execute-Assembly  Inline-Assembly  Encryption of data streams  Implementation of smart pipe redirectors with automation  Download functionality for the implant  Upload functionality for the implant  Directory operations  HTTP C2 channel  Improve OPSEC  Evasion techniques  Custom Term Rewriting Macro¬†¬†"
  },
  
  {
    "title": "PrimusC2 - New Release | Update 2.0",
    "url": "/posts/PrimusC2_update/",
    "categories": "PrimusC2, updates",
    "tags": "AD, Red Team, C2, PrimusC2, ExecuteAssembly",
    "date": "2023-11-19 00:00:00 +0100",
    





    
    "snippet": "I am very happy to have this new update of PrimusC2 released. I have hit some pretty big milestones with the project and done some cool stuff.PrimusC2 Github linkWhat‚Äôs new:  File Operations       ...",
    "content": "I am very happy to have this new update of PrimusC2 released. I have hit some pretty big milestones with the project and done some cool stuff.PrimusC2 Github linkWhat‚Äôs new:  File Operations          cd      ls¬†      pwd        Execute .NET Assembly in memory (HYPE)  Revamp of data transfer between server and implant¬†  Added more exception handling (not bulletproof yet)  Changed how the implant handles commands (no more of accidentally firing of a command)  Quality of life stuff          Command History¬†      Autocomplete Commands¬†        Removed persistence functionality (will implement another version in the future)Im going to elaborate on some of the changes in the coming sections.¬†Execute .NET Assembly¬†This one is huge for me, i wanted from the start to include some more advanced functionality in the C2, to elevate it from being an Advanced Reverse Shell Handler. I have now successfully implemented the execution of .NET assemblies in memory.¬†Here is a short demo of the new functionality in action üòé¬†The functionality for execute assembly has been tested with a couple of popular offensive .NET tools, such as Rubeus, SharpWMI, Seatbelt and so on. The current state of the functionality is still quite unpredictable and can do weird stuff sometimes (still working on that). Large output from tools, seems to break it, and I haven‚Äôt found a proper solution for that yet. However, I am still very pleased with the progress I have made so far.File OperationsPrimusC2 now has some proper directory operations on the machine; it does not rely on PowerShell anymore to do: ls, cd and pwd, this makes it easier to traverse the filesystem and see what goodies that are hidden on the desktop üëÄHere you can see it action:Quality of life and command handlingIve made some small (but nice) quality of life improvements. Ive added command history (Arrow Up/Down) to make it more dynamic, and I have added autocompletion for the native commands in PrimusC2. Furthermore, I have changed the way commands are handled on the implant side. Preivoulsy, when a command was executed from the server side, the implant would try and execute that as a powershell command directly. Now the implant only has unmanaged powershell and can execute commands with Windows CMD as well, but you need to specify either pwsh or shell :)¬†ConclusionMy plan is to keep developing on this when I have the time to make more cool features, but also more stable and less prone to crap out if something goes wrong or the operator mistypes anything. It has turned out that using TCP as a C2 channel can be quite challenging, and sometimes it lives its own life. In the future, I am going to explore HTTP as a C2 channel to perhaps bring more stability to the C2.Big shoutout to all the other nim projects out there, they helped me great deal while working on this update!This is it for now. I hope that you will enjoy the update, and I would love to hear your feedback or answer any questions that you might have.Thanks for reading, and have an excellent day.¬†¬†"
  },
  
  {
    "title": "CRTP Review",
    "url": "/posts/CRTP/",
    "categories": "Certifications, reviews",
    "tags": "AD, Red Team, Certificate",
    "date": "2023-10-11 00:00:00 +0200",
    





    
    "snippet": "I‚Äôm very pleased to announce that I passed the Certified Red Team Professional(CRTP), from Altered Security. It was quite an enjoyable experience, appreciating not only the opportunity to reinforce...",
    "content": "I‚Äôm very pleased to announce that I passed the Certified Red Team Professional(CRTP), from Altered Security. It was quite an enjoyable experience, appreciating not only the opportunity to reinforce my existing knowledge but also the newly gained skills.Throughout this post, I will go through my thoughts about the learning material, the exam experience, and the final conclusion about the certificate itself.The Training Material and LabThe format of the learning material is nothing fancy. You will receive a zip file containing all the files, knowledge, etc. that you need in order to pass the exam. No other resources are required (looking at you, Offsec üëÄ..)If you pay good attention to the videos and complete the lab fully, you should be good to go‚Ä¶.However, there are some prerequisites, imo, in order for this to apply to you:¬†      TAKE notes, and do it thoroughly; this means writing down commands, tool syntaxes, short descriptions of topics, and so on. Finally, this is the deciding factor in whether you will succeed or fail.        Think basic, and rely on your GOOD notes.¬†        Understand enumeration in Active Directory using manual tools like PowerView. But learn to use Bloodhound, this will give you a way better overview and save you a lot of time in the end.  FormatRegarding the format of the learning material, as of right now, the videos that are up-to-date are in the format of four 2-3 hours recordings from the Live bootcamps that they offer. This makes it very hard to track your own progress and can be frustrating at times because the instructor will interact with the live audience (kind of felt like a time waste for me). I am much in favor of the model that TCM offers, with an online platform that has short and to-the-point videos with a progress bar.ContentEven though I disliked the format, I really liked the content and the knowledge presented in the course. It covers everything from simple enumeration in Active Directory to persistence, etc. The instructor does a good job of presenting the content, and it‚Äôs up-to-date. It‚Äôs not run this tool and see the MAGIC output; he actually goes into explaining the concepts and technologies behind the attacks. Thumbs up for that, üëçLab timeThe lab is all-round very well built; it‚Äôs reasonable stable, a BUNCH of attacks are covered, and there is a great lab manual to support your learning (I do encourage to try and complete as much of the lab as possible without using the lab manual). I opted for 30 days of lab time, which was plenty of time for me, but this might be different, if you come into this certification with very little knowledge of Active Directory. If you are really new to AD pentesting, I would recommend going with 60 days to ensure that you have tried all the attacks at least once or twice.The exam and reportingI can‚Äôt say much about the exam experience without violating any NDAs. But the exam itself was in a very stable environment, and the customer support was quick and awesome. You have 24 hours to complete the given exam lab and then 48 hours to complete a written report covering your findings, mitigations, etc. I used around 6 hours to complete the lab (including raw notes and screenshots along the way). For the report, I opted to relax a bit, so I spent around 12 hours on that.I used pwndoc to write my report. I use this tool for all my certifications, as it lets me create a library of findings and custom sections that I can use for the generic findings I discover. It‚Äôs only worth it to use pwndoc, if you keep on building your library of findings, since the tool can‚Äôt generate anything automated for you.ConclusionThis certification is really good if you are just getting started in pentesting Active Directory, a blue teamer who wants to understand AD attacks better, or just a pentester looking to reafirm your skills or perhaps gain a few new ones. I would rate the exam level at easy/medium depending on your expereince level, and i would reccommned to everyone considering taking the certifications just to do it. Buy it, set an exam date for yourself and go nuts in the lab.Good luck and have fun!¬†¬†"
  },
  
  {
    "title": "First Post!",
    "url": "/posts/first_post/",
    "categories": "Informational, Update",
    "tags": "info",
    "date": "2023-09-09 00:00:00 +0200",
    





    
    "snippet": "The first postThis will be my first post on this blog/wiki/anything site. I havent fully decided on what content that i will post here, but i have some ideas. The following things are properly goin...",
    "content": "The first postThis will be my first post on this blog/wiki/anything site. I havent fully decided on what content that i will post here, but i have some ideas. The following things are properly going to show up here at some point:  Updates on the development of my C2 Framework PrimusC2  HTB writeups(of some sort)  More Maldev stuff(as i learn)  Random Offensive Security StuffThanks for the read, if you want to get in contact, feel free to reach out on my socials.Have a good day!"
  }
  
]

